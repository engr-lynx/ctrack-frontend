service: ${file(./package.json):name}


provider:
  name: aws
  stage: ${opt:stage, file(./config.json):stage}
  region: ${opt:region, file(./config.json):region}
  deploymentBucket: ${file(./config.json):deploymentBucket}


custom:
  s3Bucket: ctrack-temp-3


resources:

  Resources:

    SPAS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}

    SPAOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "OAI for ${self:custom.s3Bucket}"

    SPAS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: SPAS3Bucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                CanonicalUser:
                  Fn::GetAtt:
                    - SPAOriginAccessIdentity
                    - S3CanonicalUserId
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*

    SPACloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
              Id: SPA
              S3OriginConfig:
                OriginAccessIdentity: 
                  Fn::Join:
                    - /
                    - - origin-access-identity
                      - cloudfront
                      - Ref: SPAOriginAccessIdentity
          Enabled: true
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            TargetOriginId: SPA
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
